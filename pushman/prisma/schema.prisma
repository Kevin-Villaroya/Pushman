datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?      @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  members        TeamMember[]
  owner          Team[]
}

model TeamMember {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  teamId String @db.ObjectId
  roleId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, teamId])
}

model Team {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String?
  ownerId  String       @db.ObjectId
  members  TeamMember[]
  projects Project[]
  roles    Role[]
  owner    User         @relation(fields: [ownerId], references: [id])

  @@unique([name, ownerId])
}

model Role {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  teamId     String       @db.ObjectId
  name       String
  rights     Rights[]
  mandatory  Boolean
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  TeamMember TeamMember[]

  @@unique([name, teamId])
}

enum Rights {
  READ
  WRITE
  DELETE
  EXECUTE
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  teamId       String        @db.ObjectId
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  endpoints    Endpoint[]
  environments Environment[]

  @@unique([name, teamId])
}

model Endpoint {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  method    String
  url       String
  headers   String
  body      String
  response  String

  @@unique([name, projectId, method, url])
}

model Environment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  projectId String     @db.ObjectId
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variables Variable[]

  @@unique([name, projectId])
}

model Variable {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  value         String
  environmentId String      @db.ObjectId
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([name, environmentId])
}
